일전에 JS를 배우면서 JS로 표를 만드는 문제를 푼적이 있다
이때, createElement, appendChild 등의 함수를 이용해서 제작을 했는데
이걸 조금더 쉽고 빠르고 유연하게 사용하도록 만들어진것이 React이다

문제는 그러다보니 React가 대단히 종속적은 문법을 가지고 있다는것
왜냐, React는 단순하게 우리가 적는걸 그대로 쓰는게 아니라
createElement, appendChild등을 효율적으로 이용하게 하기 위해서 "자동으로" 작성해주는 기능
-> 쉽게말해서 번역기인 기능이다


이런식으로 번역을 해주다보니 문법적으로는 문제가 아닌데 React적으로는 문제인 경우가 많이 생긴다
JS를 조금 엄격하게 제약을 건다면 어떨까? -> 너무 자유롭기에 생기는 문제
그래서 JS를 조금더 엄격하게 만들기위한 새로운 언어 => 
***Typescript*** = 자바스크립트랑 완벽하게 똑같은데 딱 하나 추가 엄격하게 만들기 위한 자료형만 추가
이건 실행할 때가 아니라 작성할 때 문제를 파악할 수 있다! 좀 더 안전하게 작성 가능!
근데 자료형을 바꾸면 범용성이 없어진다. 자바스크립트가 브라우저 전용이지만 nodejs로 잘쓰이는데 자료형 바꾸면 문제생김
잘못하다 업데이트 하다 소송 당할수도 있다 

Typescript는 일반적으로 그대로 사용하지 않는다
Typescript를 이용해서 작성하면 그게 오류인지 아닌지 판별을하고 최종적으로 Javascript로 변환

$$$ (오늘 핵심) 그래서 React를 배우는 첫시간에 할 내용은 바로 React를 안전하게 이용하기위해서 Typescript를 사용하는 방법

Typescript
  NodeJS에서 사용하는 패키지의 일종
  Javascript로 변환되도록 자료형이 포함된 Javascript를 작성하는 언어

  Typescript 사용법
    npm init -y
    npm install tsc typescript => npm install -D typescript (이제 내부에 tsc이 내장이 되어있다?)
      $$$ tsc => typescript 내장
        typescript compiler의 약자
        typescript 문법을 javascript 문법으로 교체하는 패키지
      typescript
        typescript 문법대로 작성시 해당 문법을 발견하교 교정하는 패키지
    npx tsc init
       *** typescript compiler로 번역을할때 어떤걸 기준으로 어떻게 번역할지를 결정할
      설정 파일을 생성하는 명령어
      npx -> 설치된 패키지를 실행하는 명령어
        npx tsc ~ -> tsc에서 제공하는 명령어 실행

tsconfig.json -> 이 설정에 들어가서 보는 주석되있는 코드 공부
  typescript를 javascript로 번역할때 사용할 설정

  target - $$$ 이미지 첨부 참고하셈
    목표/목적
    javscript로 번역을할때 ECMAScript 몇버전을 목표로 번역할지 결정
      ES5    -> 2009
      ES6    -> 2015
      ES2016 -> 2016
      ESNext -> 올해
    버전명을 명시해서 번역할 버전 지정
    버전을 지정해도 해당 버전의 하위 호환을 유지해준다는거지 어떤 기능을 쓸 수 있다는 말은 아니다
  
  lib
    javascript로 번역되기전 typescript에서 사용할 기술 명세서
    하위호환을 위해서 target을 예전 버전으로 만들어도 최신기술을 쓰고싶다
    혹은 esnext로 아직 개발중인 기술을 쓰고싶다 할때
    정확히 사용할 기술을 명시하는 부분

  rootDir
    .ts 파일을 어디에있는것을 이용할지 결정하는 옵션
    보통은 src 폴더를 지정해서 해당 폴더 하위 내용만 사용하도록 지정

  outDir
    .ts를 .js로 번역할때 어디에 번역할지 위치 지정

typescript 번역 방법
  npx tsc 파일명.ts
    해당하는 파일을 번역해
    이 방법은 "손수" 명령어를 이용해서 번역하는 방법
  
  npx tsc -w : $$$ 손수 번역하면 번거로우니 알아서 번역하는 기능
    watch 옵션이라고해서 rootDir 폴더를 감시하다가 파일의 변경을 감지하면 그걸 outDir에 번역하는 기능

typescript 문법
  변수를 만들때 변수 이름 옆에 자료형을 함께 적는다
  let, var, const 를 앞에 적었다
  이걸 없앨수는 없다보니 변수명 오른쪽에 자료형을 적는다

  let a:자료형;

  단순히 변수를 만들때 자료형을 적거나 함수의 리턴 자료형을 적거나 해서
  자료형을 명시해서 오류를 줄이는게 typescript의 문법

  두가지 자료형을 한번에 명시하기 위해서 | 자료(OR)형이 존재한다
  자료형에 A | B 라고 적으면 둘중 아무거나란 뜻의 되어서 두개의 자료형을 모두 받을 수 있다

  자료형을 위한 문법
    A | B
      union 이라고 해서 두개의 자료형중 아무거나
    1 | 2
      literal 이라고 해서 자료형 대신 값으로 제한
      원래 자료형이 없던걸 추가하는거기에 값을 자료형으로 사용할 수 도 있다
    [A, B]
      tuple 이라고 해서 array형의 값의 자료형을 지정
    { A:B, C:D }
      prototype형의 tuple
    type Name = 자료형;
      자료형 명명법
    never
      함수의 리턴값이 절대 없음 또는 함수가 예외(throw)를 발생시킴
    void
      리턴값 없음
    unknown
      아무거나 받을 수 있는 자료형 -> 조금더 자료형의 안정성이 높다
    any
      아무거나 받을 수 있는 자료형

////////////////////////////////////// 연습 문제 //////////////////////////////////////
0. 테이블의 크기를 반복적으로 키우는 페이지
  - 1. 테이블은 처음 1x1로 생성
  - 2. 5초마다 테이블의 크기가 2x2, 3x3, ... 으로 증가
  - 3. 함수로 작성

1. 위 0번문제에서 만든 테이블에 짝수번째 row는 빨간색, 홀수번째 column은 파란색이 되도록 작성
  - 1. 두 칸이 겹치는 부분은 보라색
  - 2. 칸이 늘어나도 동일하게 동작하도록
  - 3. 함수로 작성

2. 위 0번문제에서 만든 테이블에 제약 추가
  - 1. 최대 30 row 까지
  - 2. 최대 20 column 까지
  - 3. 함수로 작성

https://zoom.us/rec/share/hCGbk1647DcX7VC_zxM5dWA3h98IiezpFlXQPAANW1w4g_hIilAr8R5Ut5mvmKNI.yRzboge2ESMgQYTj 
암호: jG7.Ldc7