React의 기능적인 면모는 대체적으로 다 배웠다고 할 수 있다
그렇다면 이제 Dynamic한 웹을 개발해나가면 되는건데
아직, 문제가 한가지 있다

그건 바로 fetch를 이용할때 -> Promise를 사용할때
fetch : 외부의 있는 서버를 가져오는 것
Promise는 비동기 함수이기 때문에 Promise를 사용하는 순간 동시에 처리가 일어난다

문제는 React는 동기성 프레임워크라는것
이런것처럼 비동기 동작을 추가하게 되면 React는 비동기를 제대로 처리할 수 없기 때문에
오류를 내거나 페이지 렌더링이 이루어지지 않을 수 있다

이걸 해결하기위해서 useRef, useEffect, useState를 이용한 방법을 쓴다
비동기를 비동기가 아니라 동기하는것처럼 처리하도록 우회 :  $$$ 예제 1번임
fallback Page라는 기본 디자인을 만들어두고 
나중에 비동기가 끝나면 fallback을 대체하는식

이러한 비동기 처리를 하는 방식을 Lazy Loading이라고 부른다

이런식의 Lazy Loading 처리를 하기위한 리액트의 비동기 컴포넌트가 생기게 되었다
useEffect, useRef, useState로 직접 fallback을 만드는것과 역할을 동일한데
단지, 복잡하게 작성할 필요 없이 일반 React Component처럼 사용할 수 있도록 만들어둔 컴포넌트

즉, 오늘 배울 내용은 Lazy Loading에 사용될 비동기 컴포넌트의 작성 방법

Lazy Loading
  1. 비동기 컴포넌트를 만드는 방법
    - 1. React.FC를 Promise<React.FC>로 변경하는것
    - 2. import()를 활용해서 로딩하는것
      import A from B 라고 적고있다
      이건 동기 불러오기
      import('파일명'); 비동기로 파일을 불러오는 기능
      Promise 타입으로 반환
  2. react.lazy에 함수 리턴값으로 할당
    react.lazy(()=>{}) 이렇게 쓰는 함수
    안에 넣는 함수의 return 값이 Promise기반이라면
    Promise가 끝날때까지 기다렸다가 컴포넌트를 활성화

    lazy를 이용한다면 해당 컴포넌트 함수가 Promise로 몇겹이 쌓여있건 전부 처리한 후에 결과를 볼 수 있다
    비동기적으로 처리되는것을 동기적으로 처리할 수 있게된다 : $$$ 2-3 예제까지의 내용
  3. Suspense 태그 안에 lazy 태그 추가
    완충 태그를 사용한다 $$$ lazy 단점을 보완하기 위함
    해당 완충 태그는 fallback 태그를 속성으로 포함함으로써 
    내부 lazy가 로딩 될때까지 fallback을 대신 로딩하는 기능
      <Suspense fallback={<div></div>}>
        <Lazy/>
      </Suspense> $$$ 예제 5번까지 여기임

Lazy Loading의 단점
  CSR 전용
  SSR에서는 Lazy Loading을 해도 사용자는 못알아본다
  Lazy Loading 을 이용할때는 외부 껍데기 부분은 SSR로 만들고 내부만 CSR을 쓰던가
  전부 CSR을 이용하던가
  즉, 그만큼 속도가 느려진다

  즉, Lazy Loading이 무조건 좋은것은 아니다
  그리고 제일 중요한점은 Lazy Loading은 사용자 PC에서 이루어 지기 때문에 
  보안이 매우 취약 $$$ 솔직히 크게 신경 안써도 된다 한다 개발할 땐 next 쓴다 함

////////////////////////////////// 연습 문제 //////////////////////////////////
useEffect, useState, useRef를 이용해서
setTimeout으로 불러온 3개의 숫자를
3초 뒤에 화면에 띄우는 웹페이지

https://zoom.us/rec/share/uHJRTbBN-PHGKQonQghNM_BNkrWU1hwbfsLKiwCU8BqwV2VLiNJILloU70SAG9A7.nGWAyojhY5cr_wLN 
암호: ?+6=*CHl