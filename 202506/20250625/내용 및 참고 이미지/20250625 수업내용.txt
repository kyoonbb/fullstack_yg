리액트에서 컴포넌트를 구성하는 방법에 대해서는 모두 배웠다
React.FC를 이용해서 원하는 태그(원하는 형태의 태그 집합)을 미리 만들어두고 사용하는 방법
Props를 받아와서 원하는 태그를 만들어둘때 여러가지 Variant을 만들어두고 골라서 이용하도록 제어

$$ app.tsx 예시1번 보고 강사님이 설명함

컴포넌트(태그)에게 Interaction을 넣고 싶어지는 경우가 생긴다 => 이벤트 등록
이벤트 등록 방법
  document.querySelector 검색 후 addEventListener로 등록해왔었지만
  리액트에서는 이렇게 검색 후 등록은 비효율적이고 직관적이지 못하다
  그렇다보니 직접적으로 태그에게 이벤트를 등록할 수 있도록 함수를 등록하는 속성
  onClick, onChange, onMousemove 같은 속성
  해당 속성에 함수를 넣어주면 해당 동작을했을때 Interaction하는 이벤트를 등록하게 된다

$$ app.tsx 예시2번 보고 강사님이 설명함

React에서는 DOM을 그대로 제어하지않고 가상 DOM이라는걸 만들고 그걸 제어 
왜냐하면 DOM을 직접 제어하면 DOM은 화면에 관여를 하기 때문에 사용자가 불편함을 느끼기도 하고
화면에 관여하다보니 직접적인 데이터 변환에 추가적인 내용이 포함되어서 성능이 느려지기도 한다

이러한 문제를 회피하기위해서 React는 따로 In-Memory에 가상 DOM이라는 변수를 만들어두고 우리가 Component를 만들면
해당 컴포넌트를 실행할때마다 가상 DOM의 변수를 변경하는식으로 제작
   DOM - html - head
              - body - tag
  VDOM(가상돔) - html - head
              - body - tag
실제 DOM에 적용되는건 가상 DOM의 변경이 끝난 후에 일괄 처리하면 되기 때문에
성능상으로도 매우 유리하고 사용자도 깜빡임을 느끼지 못하도록 만들 수 가 있다

그리고 이러한 가상 DOM을 이용하기 때문에 변수를 아무리 바꿔도 해당 변수가 포함된 Component가 다시 렌더링되지 않으면
적용되지 않는다

React에서는 특정 페이지를 다시 변경하고 싶다면 변수를 바꾸는것에서 그치지 않고
바꾼 변수의 값을 적용시키도록 만들어야한다

이런식의 이슈때문에 React에서는 페이지를 갱신하는 기능을 만들어뒀다
문제는 이러한 페이지 갱신 기능을 단순히 수동으로 호출해야한다면 여기저기에 너무 많이 불러야한다

페이지 갱신 (수동으로 할 경우 이 두 과정을 항상 해야함)
  가상 돔 갱신 -> 실제 돔 적용

이러한 페이지 갱신을 언제하는가? => 이벤트가 호출되었을때 => 변수 값이 변경될때
변수값을 관리하는 기능을 만들어둔다면 해당 기능 안에서 페이지 갱신을 시킬 수 있겠다
이러한 값의 변동을 감지하면 페이지를 갱신하도록하는 함수들 => Hook(훅)

훅을 이용한다면 리액트의 가상 돔 갱신과 실제 돔 적용이 알아서 동작한다

그래서 React에서는 상태의 변화는 "무조건" 훅으로 관리된다
훅의 기본 규칙
  훅은 함수를 통해서 상태를 관리하는 기능
  훅은 함수의 이름 앞에 use를 붙인다
    useState, useEffect, useDisclosour, ...

  훅으로 상태를 변경해도 즉각 반영되지 않고 연속된 변경이 끝나면 일괄 반영
  훅의 상태로 받아온 변수는 함수를 불러도 바로 적용되지 않고 다음 렌더링때 반영된다

  훅으로 변화하는 리액트의 상태는 독립적 -> fetch(Promise 기반의 외부 정보 획득 함수)

Hook의 종류
  useState
    단일 값(한개의 정보)을 보관하고 제어하기위해서 사용하는 훅
    하나의 값을 변경하면 해당 값에 연관되는 모든 데이터가 일괄 변경되게 하고 싶을때 사용하는 변수

    사용방법
      const [이전 상태 값, 상태 값 변경 함수] = useState(기본값);
      코드에 사용하는건 이전 상태 값을 이용
      값 변경에는 상태 값 변경 함수를 이용 => 함수 내부에서 가상 돔 변경과 실제 돔 적용 기능을 호출
    
    단점
      한개의 값을 관리하기위해서 만들어진 훅이다보니 여러개의 값을 관리하려면 각각 따로 관리하던가
      전체가 한번에 변화하도록 만들 수 밖에 없다

  useReducer
    여러개의 값을 보관하고 제어하기위해서 사용하는 훅
    useState 여러개를 내부적으로 관리하는 구조
    그래서 각각의 데이터를 제어할때 useState로 한방에 제어할때보다 조금더 최적화된 상태로 제어가 가능

    사용방법
      let [이전 상태 값, 상태 값 변경 함수] = useReducer(제어 함수, 기본값);
      상태 값 변경 함수(액션 타입); => 어떻게 변화시킬지 변화시킬 상태 값
      제어 함수(이전 값, 액션 타입) return 변경 값;

    단점
      복잡한 형태의 값을 관리하기위해서 만들어지다보니 단일 값을 관리할때는 과하게 복잡하다
      그러한걸 견딜 수 있을 정도로 깔끔하게 코딩을 한다면 매우 좋지만 그렇지 않으면 오히려 성능 저하가 생기는 경우도 있다
      값의 변화의 단계를 설정할 수가 없다

  useEffect
    특정 훅을 이용해서 관리하는 변수의 값을 Watching(감시)하는 훅
    감시도 단순하게 보고있는게 아니라 값을 비교한다
    비교하다 값이 변경되면 그때 연결된 함수를 실행하도록 하는것

    사용방법
      useEffect(동작함수, [의존성 목록]);
      의존성 목록에 변수들을 넣고 해당 변수들의 값이 변경되는 순간 동작함수가 실행되게 하는것
      의존성 목록의 데이터가 1개라도 변경되면 함수가 호출되어서 전체적인 체인을 동작시킬 수 있다

    주의사항
      의존성 목록을 비워두면 "최초 1번 실행 후 정지" => useEffect(()=>{},[]);
      동작 함수의 리턴값에 함수를 넣으면 해당 함수는 CLEAR 함수가 되어서 해당 컴포넌트가 제거될때(언마운트) 실행되는 함수

////////////////////////////////////////////////// 연습 문제 //////////////////////////////////////////////////
리액트를 이용해서 쇼핑몰 페이지 제작
    쇼핑몰 페이지에서 위에 메뉴 제작
        메뉴는 home, shop, mypage 세개 존재
        각 페이지를 클릭시 그에 해당하는 웹페이지 구성을 보여주도록 작성
    home 에서는 커다란 배너 이미지만 화면에 나오도록 구성
    shop 에서는 여러개의 상품을 띄우고 검색기능 구현
        상품은 image, title 만 존재
        검색 기능은 title의 일부분을 입력하면 해당하는 데이터가 포함된 상품만 화면에 나오도록 구성
            debounce를 넣을 수 있으면 넣어서 구성
    mypage 에서는 사용자의 아이디와 비밀번호를 표기
        비밀번호를 클릭시 아래에 input창이 나오고 input창에 무언가를 입력시 비밀번호가 변경되는 기능 구현


리액트를 이용해서 아래 기능 구현
  표 만들기
  input 2개로 표의 row, col 제어
  input 1개로 표의 글자 색상 제어

https://zoom.us/rec/share/GB5ZkPj8bJ-vvDhFuwYdDomOoCNhDerLxsJfZ1TG8P0KHU7L6v-Y925z1ge2NqqO.iWku_w6tIMQ2deAG 
암호: J5=EvZ5%