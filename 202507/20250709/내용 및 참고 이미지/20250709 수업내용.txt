NextJS의 백엔드에서 NextRequest에 대한 내용
이걸 배우기 위해서는 먼저 필요한것이 있다

요청을 보낼 페이지가 필요
NextRequest가 GET, POST 같이 정해진 Method의 요청 정보를 담고 있는 객체이기 때문에
요청이 없으면 사용이 불가능하다

$$$참고 이미지 1 참조

요청을 할때 추가적인 내용이 포함되어있어야지만 사용하는 의미가있다
그래서 NextRequest를 배우기 위해서는 그에 맞는 요청 페이지가 필요하다
  form, fetch, ...   

그래서 미리 회원가입 페이지를 만들자
  form 태그를 기반으로 회원가입 page.tsx 제작
  action에 회원가입 기능을 만들 백엔드 URL를 작성
  그후 백엔드 함수에 연결

해당하는 백엔드 함수(GET, POST, ...)에서 사용자의 요청을 분석할 수 있어야한다
이때 사용되는것이 사용자의 요청 정보를 담고 있는 NextRequest다.

이러한 NextRequest의 정보를 분석할때 얼만큼의 시간이 걸릴지 모르기 때문에 $$$api 하위 route 폴더들 봐라 다 이구조이다.
비동기 Promise기반으로 기능이 제작되어있다
이러한 비동기를 쓰기 위해서 async로 백엔드 함수를 만들어야한다
async로 만들어도 자동으로 처리해주기 때문에

그렇다면 핵심은 "프론트엔드"에서 "백엔드"로 어떻게 정보를 보내는가? $$$ 오늘 가장 중요함
즉, 오늘 배우는 내용의 핵심은 "프론트"에서 "백"으로 정보를 보내는 방법

Request하는 방법
  formData를 활용하는 방법 -> form 태그
    form 태그를 활용해서 input 태그에 입력된 데이터를 submit하는 것
    이렇게 form 태그를 formData로 묶어서 보낸 데이터는 request에서
    formData() 함수로 비동기 분석을하면 원본 데이터가 나오게 된다
      원본 데이터의 집합이 나오게 된다<set>
      값을 꺼낼때 A.Key 이런식이 아니라 A.get(Key) 방식을 이용하는것

    문제는 form 태그에서 정보를 submit할때 Method에 따라서 분석 방법이 다르다
      GET -> URL에 정보를 포함
      POST -> 본문에 정보를 포함
    이러한 이슈 때문에 분석하는 방법을 따로 고안해야한다
    formData() 함수는 우리가 만드는게 아니다
    그래서 원래는 formData가 Get 방식의 Query String도 분석해야한다
    따로 수동으로 분석을하거나 자동 분석을 다른 함수로 빼낸것
    
    이러한 이유 때문에 동일하게 formData를 이용해서 정보를 전달한다고해도
    GET방식의 경우(QueryString의 경우에는)
    request.nextUrl.searchParams.get(Key) 로 이용해야한다

    이렇게 form 태그로도 충분히 정보를 주고받을 수 있다
    하지만 form 태그를 이용한 formData 방식에는 고질적인 단점이 있는데
    바로, 페이지가 "무조건" 갱신된다는것

  body를 활용하는 방법 -> fetch 함수 $$$ boards가 예제임
    그래서 페이지 갱신을 무조건 하지 않도록 단순히 정보를 주고받는 백엔드 호출이 필요해졌다
    그래서 나온것이 페이지 갱신 없이 정보를 요청하는 방법 -> body를 이용한 fetch

    이러한 fetch를 react component에서 사용하면 반복적인 요청이 되서 무한 반복에 빠질 수 있다
    그래서 이런일이 안생기게 useEffect훅을 쓰고 훅 안에서 fetch를 하는게 일반적인 방법

    이렇게 fetch로 데이터를 요청할때 form 태그처럼 formData를 담을 방법이 없다
    그래서 담을 방법이 없기 때문에 다른 방법인 body를 이용해서 정보를 전달한다
      fetch(URL, {body:작성});

    이렇게 다른 방법으로 가져오다보니 NextRequest에서 다른 방법으로 가져온 값을 분석해야한다
    이때, 백엔드에서는 Request.json()으로 분석해야지만 올바르게 Body로 넘긴 데이터를
    가져올 수 있다

    하지만 이 방법에는 불편한 점이 있다 -> method를 무조건 post를 써야한다는것
    왜냐하면 body가 원래는 POST의 정보를 담는 공간

Request하는 방법을 통해 프론트에서 백으로 정보를 옮기기만하면 그 이후는
단순한 로직 작업만 있다
그래서 백엔드는 프론트가 어떤 정보를 보내올지 임시 정보를 토대로 작업해도 상관이 없고
프론트는 백이 어떤 작업을할지 임시로 정보를 보내도록 만들고 작업해도 상관이 없다

서버에게 페이지 Redirect가 포함된 어떤 요청 -> form 태그
서버에게 정보를 달라고하는 요청 -> fetch 함수

하지만 무조건 정해진건 아니다
form 태그를 쓸때 onSubmit 이벤트 함수를 등록하고
해당 함수에서 preventDefault 함수를 호출하면 기본 기능이 막힌다
그때 fetch를 하면 form태그도 fetch처럼 사용이 가능

$$$정보를 넘기는 fetch,form만 하면 프론트가 신경쓸게 없다 나머지는 백엔드이다

fetch를 쓸때 form 태그의 데이터를 formData라는 객체로 담고 body에 넣으면
form태그를 쓴것처럼 사용이 가능
단, redirect만 수동으로 해주면 된다

[User] -> [Request ] -> [Internet] -> [Requese ] -> [Server]
[User] <- [Response] <- [Internet] <- [Response] <- [Server]

그 뒤 test 폴더 만들어서 실습 진행 나중에 통째로 지피티 돌려서 이해 필요

////////////////////////// 연습 문제 //////////////////////////
1. 수업에 만든 /boards 접근시 페이지 네이션 기능 구현
  - 1. /boards?page=1 -> 현재 페이지  -5 ~ +5 링크 구현
  - 2. /boards?page=1 -> 현재 페이지의 게시글 번호 구현
  - 3. /api/boards -> 페이지 개수 구현
  - 4. /api/boards/{page} -> 해당 페이지의 개시글 목록 구현
  - 5. /api/board/{id} -> 해당 번호의 게시글 내용 구현
