Vite로 이루어진 React가 아니라 NextJS로 이루어진 React를 만드는 방법에 대해서 배운다

Vite는 SPA 기반의 React
멀티 페이지 구현이 어려웠다

NextJS는 MPA 기반의 React
멀티 페이지를 매우 쉽게 구현

NextJS 구축 방법
  1. npm init -y
    nodejs 패키지 관리자 설정
  
  2. npm install next react react-dom tailwindcss @tailwindcss/postcss typescript @types/node @types/react @types/react-dom
    nextjs를 활용하기위한 패키지 설치
    추가 설치는 따로
  
  3. 파일 및 폴더 준비
    package.json
      type:module
    
    app/ -> NextJS는 자동화에 목숨을 건 그런거다
      폴더 생성 $$$ 매우 중요
      해당 app 폴더가 내부 폴더를 기반으로 경로를 생성하는 구조
      app/home            => /home
      app/home/a          => /home/a
      app/mypage          => /mypage
      app/mypage/profile  => /mypage/profile

    components/ $$$ 따로 관리를 하는거 뿐
      컴포넌트 폴더 생성

    public/
      일반적으로 코드가 아니라 단순 공유를 위한 파일을 넣어두는 공간
      해당 폴더에 파일을 넣으면 경로 접근시 자동 접근이 되도록 연결
      .ico, .jpg, .mp3, .mp4, ...

    실행명령어 : npx next dev
    
    .env $$$ 공통적으로 사용할 변수같은거 관리할 때
      API KEY 같이 사용자가 코드를 통해서 접근하면 안되는 정보를 따로 모아두는 파일
      KEY=VALUE 형식으로 작성해두면
      코드에서 process.env.KEY 라고 적으면 VALUE가 나오도록 변수 병합이 이뤄진다

      보안법을 위반하지 않도록 특수한 명칭이 존재
        NEXT_PUBLIC_ 접두사
        해당 접두사를 붙이면 보안법과 관련이 없어지기 때문에 어디서든지 사용이 가능해진다

    next.config.ts
      nextjs 설정을 명시하는 파일
      export default {
        reactStrictMode: true, // 개발 중에 렌더링을 두번씩 해라
        compress: true, // 빌드시 시간을 더 들이고 용량을 압축하는 옵션
        basePath: '', // 웹페이지 만들때 기본 경로
        output: 'standalone', // 필요한 파일만 뽑아내서 독자적으로 사용할 수 있는 옵션
        trailingSlash: false, // 경로 작성시 마지막에 / 존재 여부
          // /home => /home/
      }

    tsconfig.json 
    postcss.config.ts
      이전에 vite에서 쓰던거 복사 $$$ 둘 다 필요한거임 !
    
    app/global.css $$$ 보편적으로 app 안에 넣는다
      tailwlind를 사용하기위한 css 파일

  4. NextJS 페이지 준비
    NextJS는 app 아래의 폴더가 한개의 경로가 되고
    각각의 폴더 안에 들어있는 파일이 디자인 React가 된다

    각각의 파일이 어떤 내용인지 알 수 없기 때문에 
    파일명으로 역할을 구분한다

    page.tsx
      해당하는 경로에서 실제로 보여줄 context
      export default function app_page(){} $$$ 함수 이름은 겹치지 않게 앞에 폴더명을 적고 시작한다 보통

    layout.tsx $$$ 먼저 렌더링 됨
      해당하는 경로 하위의 모든 경로에 기본적으로 렌더링될 껍데기
      각 폴더별로 전부 만들 수 있는데
      각 폴더별로 즉, 각 경로별로 따로 존재하는게 아니라
      상위 Layout에 하위 Layout이 추가된 후에 Page가 그려진다

      layout에서는 하위 page를 매개변수로 "무조건" 받아온다
      layout 함수의 원형을 아래와 같다
        function Layout({children,}: {children: React.ReactNode})
      좀더 정확히는 아래와 같다
        interface props {
          children:React.ReactNode
        }
        function Layout(props:props)

      이것도 export default다
      export default function app_layout(){}

    not-found.tsx
      해당 경로를 못찾았을때 보여줄 컴포넌트

    error.tsx
      해당 경로의 page, layout 등에서 문법 오류로 동작이 안될때 대신 보여줄 컴포넌트

    loading.tsx $$$ 서스펜스가 알아서 됨?
      fallback 페이지를 만드는 컴포넌트로
      page나 layout이 async 함수를 반환할때 해당 함수가 끝날때까지 대신 보여주는 컴포넌트

  5. 페이지별 추가 정보 export $$$ 어디를 export 하냐의 따라서 영향을 끼치는 정도가 다르다
    layout
      export -> 하위 모든 경로가 동일하게 동작
    page, loading, error, not-found
      export -> 해당 경로만 동작

    export metadata
      해당하는 변수 이름으로 정보는 내보내기하면
      <meta/> 로 작성하던 페이지의 정보를 명시할 수 있다
      layout에 적으면 전체적인 경로에 동일하게 명시
      page에 적으면 해당 페이지에서만 명시

      어떤 변수가 있는지 외우는게 아니라
        https://nextjs.org/docs/app/api-reference/functions/generate-metadata
      해당 링크에서 확인후 작성
      title, description, author, keywords, robots, icon, open graph, twitter, ...

    export revalidate
      NextJS에서 SSR, CSR을 구분하는 방법은 훅으로 구분이 된다
      훅이 없다 -> 고정된 페이지 -> SSR
      훅이 있다 -> 동적인 페이지 -> CSR
        이걸 구분하기 위해 CSR은 페이지 맨 위에 'use client'를 작성한다
        metadata는 CSR에서는 동작을 안하기 때문 $$$ 그래서 그냥 쓰면 에러난다.
      
      SSR 방식의 효율성을 위해서 새로운 방법
        SSG
          이미 만들어진것만 받아오는 방식 $$$ 서버를 한번 열면 그 이후의 서버의 내용이 안 바뀜 고정
          SSR로 매번 새로 만드는게 아니라 완성된 페이지만 불러오는것
        ISR $$$ CSR, SSG 반반섞은 적당한거
          이미 완성된 페이지를 제공하는데 해당 페이지를 일정 주기마다 새로 생성하는 방법
          ISR을 이용할때 페이지 생성 주기가 매우 중요

      이러한 ISR의 주기를 명시하는것 -> revalidate
      기본값이 0

    $$$ 다음시간에 자세히 배움!
    export dynamicParams
      폴더 경로를 Dynamic하게 만들때 실시간 경로 데이터를 미리 만들지 여부를 정하는 옵션
      true,false를 넣는데
      false를 넣으면 실시간이 아니라 완성된걸 내보내겠어 -> SSG
      true를 넣으면 실시간으로 내보내겠어 -> SSR, ISR

    export generateStaticParams() {}
      SSG, ISR을 할때 동적인 정보를 실시간으로 못받는다
      그러면 동적인 정보를 사용하지 못하게된다 -> fetch를 못쓴다
      그때, 이 함수의 return 값이 page의 매개변수에 들어간다
      그럼 해당 함수가 revalidate가 되기 전까지는 다시 호출되지 않고 이전에 호출된 값을 이용하게 된다
      SSG일때는 처음 한번만 호출하고 동작이 안되서 매번 동일한 페이지를 제공
      ISR일때는 일정 주기마다 호출해서 동작이 되기 때문에 일정 주기마다 새 페이지를 제공


////////////////////////////////////////// 연습 문제 //////////////////////////////////////////
아래와 같은 웹페이지 제작 : 폴더 구조만 만들라 한다.
/home
  전체 레이아웃
  홈 페이지
/study
  전체 레이아웃
  공부 페이지
/study/exam
  전체 레이아웃
  시험 레이아웃
  시험 페이지
/study/exam/running
  전체 레이아웃
  시험 레이아웃
  시험 실시 페이지
/book
  전체 레이아웃
  책 페이지
/book/study
  전체 레이아웃
  책 공부 페이지
존재 하지 않는 경로 접근시
  전체 레이아웃
  Not-Found(해당 페이지가 없습니다.)
페이지에 오류가 발생시
  전체 레이아웃
  Error! 코드를 수정하세요!

https://zoom.us/rec/share/MFTtWFT6Uo6Okt3y4aNj_bzDBfcS-x0qaXNb7lXA7KEuCs1K9mLA3xZgP_81-imi.v2HWBx6jrdeAtHzU 
암호: 3c&l#M=n