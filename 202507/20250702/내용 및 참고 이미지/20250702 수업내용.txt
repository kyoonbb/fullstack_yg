Tailwind가 Utility 방식으로 CSS를 좀더 빠르게 만들 수 있는건 맞다
그런데 빠르게 만들 수 있게 한 대신에 당연히 가지는 단점이 있다면
유지보수가 어려워진다는것

하지만 무한히 어려워지는건 조금 그러니 최대한 덜 어려워지게 하기 위해서
Tailwind의 Utility를 Custom하는 구조

Tailwind Custom 방법
  1. tailwind.config.js 파일
    이건 v4 이전 버전에서 사용하는 구조 $$$ 왠만해선 최신 버전 쓰는게 좋다
    없어진 방법

  2. 속성을 적을때 함께 작성하는 방법
    hover(마우스가 올라갔을때) 가 필요할때가 있다
    가상 선택자나 Important 것들을 적용시킬때는 className에 적을때 함께 작성
  
  3. .css 파일에 layer와 작성하는 방법
    bg-red-500 이 다른 색상이 되도록 커스텀
    bg-naver 이 어떤 색이 되도록 만들고 싶다

속성과 함께 적는 Custom
  작성하고자하는 속성 앞 또는 뒤에 특정 글자를 추가적으로 작성

  hover, nth-child, first-child 같이 가상 선택자를 적는 경우
    이때는 hover:, nth-child: 같이 뒤에 :을 붙이고 속성을 적으면 된다
      sm:, lg: 이걸로 미디어쿼리 제작

  속성을 사용할때 정해진 속성이 아니라 직접 작성한 속성을 써야하는 경우
    [값]
    속성을 정해진 값이 아니라 직접 적어서 제어할 수 있다
      bg-red-500 => bg-[rgb(255,0,0)]
    주의사항
      값을 []로 커스텀해서 사용할때 접두사는 남겨둬야한다
      bg-red-500 여기서 bg는 배경색의 약자인데 이걸 지워버린다면 무엇을 바꿀지 알 수 없다
      커스텀하는 값의 범위를 제대로 이해하고 해당 부분만 대체
        bg-red-500 => bg-[rgb(255,0,0)]
        text-xl => text-[50px]
  
  Important 속성값을 만드는 경우
    속성값 뒤에 !를 붙인다
    bg-red-500 => bg-red-500! 라고 적는다

Layer와 작성하는 Custom : $$$ 이건 public 폴더에 global.css 파일 내에 적어줘야 한다.
  Tailwind의 기본적인 구조인 Layer에 직접적으로 관여하는 기능
  Tailwind의 기능을 속성에 쓰는것과 다르게 더욱더 직접적으로 수정을할 수 있다

  @import 'tailwindcss'를 적은 .css 파일 밑에 추가적으로 작성하는것

  Layer 작성법 : 여기서 테일 윈드가 만들어놓은 정해져 놓은 레이어를 쓸 뿐
   ->  @레이어이름 {} 

  @theme
    특정 값을 추가하거나 변경하는 레이어
    이 레이어에서는 변수를 추가하거나 변경해서 사용중인 값의 바리에이션을 추가하는 용도
      --color-*               => 색상 변경
      --font-*                => 폰트 변경
      --text-*                => 글자 크기 변경
      --font-weight-*         => 굵기 변경
      --tracking-*            => 글자 간격 변경
      --leading-*             => 줄 간격 변경
      --breakpoint-*          => Media Query 중단점
      --containter-*          => Container Query 중단점
      --spacing-*             => 마진, 패딩 단위
      --radius-*              => 모서리 크기
      --shadow-*              => 그림자

  @utility : 이걸 생산해 내는것
    한개의 단위를 이야기하는 것
    직접 한개의 단위 기능을 만드는 방법
    @utility 이름 { 속성 }
    해당하는 이름의 유틸리티를 만들어낼 수 있다

    바리에이션을 위한 방법
      @uility 이름-* { 속성 } $$$ 실제 예시 : @utility tab-size-*
      사용할때 아래와같이 적으면 된다
        --value(number)     => *을 숫자로 획득
        --value(integer)    => *을 정수로 획득
        --value([*])        => *을 그대로 획득
        --modifier(number)  => *을 연산해서 획득

    다른 유틸리티를 병합하는 기능
      @apply 유틸리티명 유틸리티명;
      해당 유틸리티 내용이 포함되도록 동작 $$$ 여기까지 4번 예시 및 global 절반 아래

    유틸리티의 Variation을 만드는 기능
      가상 선택자에 따라서 다른 디자인이 되도록 하는 기능
      @utility 이름 {
        @variant 가상선택자 {

        }
      }

    유틸리티에서 사용하는 Variation을 Custom하는 기능 $$$ 기존 바리에이션에 없을 수도 있기 땜누에 자체적으로 조작할 때 밑에 양식을 꼭 써야함
      @custom-variant 이름 {
        &Selector { @slot; }
      }

///////////////////////////////////// 연습 문제 /////////////////////////////////////
회원 가입 페이지 제작 - 디자인만
input 태그는 동일한 디자인
버튼은 "로그인" 버튼을 제외한 동일 디자인

https://zoom.us/rec/share/vbvsDHRXQja970G9XtCAE3zuL7mbdTkqFeNPPGyHmGbIUDtcatw1hBg6ebEp0UXW.AP13JmdiPYXMatBt 
암호: .7e=6Fgd